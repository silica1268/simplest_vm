#include <iostream>

using namespace std;

#define MEMSIZE 128

typedef unsigned short int addr;

addr mem[MEMSIZE] = {
	0x0000,	0x0000,	0x0001,	0x0004,
	0x0000,	0x0001,	0x0005,	0x0008,
	0x0000,	0x0002,	0x0009,	0x000c,
	0x0000,	0x0004,	0x000d,	0x0010,
	0x0000,	0x0008,	0x0011,	0x0014,
	0x0000,	0x0010,	0x0015,	0x0018,
	0x0000,	0x0020,	0x0019,	0x001c,
	0x0000,	0x0040,	0x001d,	0x0020,
	0x0000,	0x0080,	0x0021,	0x0024,
	0x0000,	0x0100,	0x0025,	0x0028,
	0x0000,	0x0200,	0x0029,	0x002c,
	0x0000,	0x0400,	0x002d,	0x0030,
	0x0000,	0x0800,	0x0031,	0x0034,
	0x0000,	0x1000,	0x0035,	0x0038,
	0x0000,	0x2000,	0x0039,	0x003c,
	0x0000,	0x4000,	0x003d,	0x0040,
	0x0000,	0x8000,	0x0041,	0x003c,
	0x0000,	0x0000,	0x0005,	0x0004,
	0x0000,	0x0001,	0x0000,	0x0008,
	0x0000,	0x0002,	0x0000,	0x000c,
	0x0000,	0x0004,	0x0000,	0x0010,
	0x0000,	0x0008,	0x0000,	0x0014,
	0x0000,	0x0010,	0x0000,	0x0018,
	0x0000,	0x0020,	0x0000,	0x001c,
	0x0000,	0x0040,	0x0000,	0x0020,
	0x0000,	0x0080,	0x0000,	0x0024,
	0x0000,	0x0100,	0x0000,	0x0028,
	0x0000,	0x0200,	0x0000,	0x002c,
	0x0000,	0x0400,	0x0000,	0x0030,
	0x0000,	0x0800,	0x0000,	0x0034,
	0x0000,	0x1000,	0x0000,	0x0038,
	0x0000,	0x2000,	0x0000,	0x003c,
};

void displayMemory(addr memory[], int memorySize) {
	for (int i = 0; i < memorySize; i++) {
		if (i%4==0) cout << endl;
		cout << memory[i] << "\t";
	}
	cout << endl;
}

addr safeAddress(addr address) {
	return address % MEMSIZE;
}

addr safeRead(addr address) {
	return mem[safeAddress(address)];
}

void safeWrite(addr address, addr value) {
	mem[safeAddress(address)] = value;
}

int main(int argc, char* argv[]) {
	addr ip = 0;
	addr i0, i1, o;
	while (true) {
		displayMemory(mem, MEMSIZE);

		i0 = safeRead(ip);
		i1 = safeRead(ip+1);
		o = i0+i1;
		safeWrite(safeRead(ip+2), o);
		ip = safeRead(ip+3);

		cin.get();
	}
	return 0;
}
